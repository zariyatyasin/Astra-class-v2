import AdminLayout from "@/components/SubAdmin/layout/AdminLayout";
import { StudentCard } from "@/components/cards/StudentCard";
import React, { useEffect, useState } from "react";
import axios from "axios";

const Index = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [role, setRole] = useState("teacher"); // Default role is teacher

  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRole, setSelectedRole] = useState("all");
  const [selectedUser, setSelectedUser] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const dummyUsers = [
    {
      id: 1,
      username: "john123",
      password: "password123",
      name: "John Doe",
      email: "john.doe@example.com",
      phone: "123-456-7890",
      role: "teacher",
    },
    {
      id: 2,
      username: "jane456",
      password: "password456",
      name: "Jane Smith",
      email: "jane.smith@example.com",
      phone: "987-654-3210",
      role: "student",
    },
    {
      id: 3,
      username: "aniak",
      password: "password456",
      name: "Jane Smith",
      email: "jane.smith@example.com",
      phone: "987-654-3210",
      role: "student",
    },
    // Add more dummy users as needed
  ];

  useEffect(() => {
    setUsers(dummyUsers);
    setFilteredUsers(dummyUsers);
    setSelectedRole("all"); // Set initial selected role to "all"
    handleSearch(); // Apply initial search and role filters
  }, []);

  const fetchUsers = () => {
    // Send GET request to fetch users
    axios
      .get("/api/users")
      .then((res) => {
        setUsers(res.data);
        setFilteredUsers(res.data);
        setSelectedUser(null); // Reset selected user
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Create user object
    const user = {
      username,
      password,
      name,
      email,
      phone,
      role,
    };

    if (isEditing) {
      // Send PUT request to update user
      axios
        .put(`/api/users/${selectedUser.id}`, user)
        .then((res) => {
          console.log(res.data);
          // Handle successful update
          // Reset form fields and editing state
          setUsername("");
          setPassword("");
          setName("");
          setEmail("");
          setPhone("");
          setRole("teacher");
          setIsEditing(false);

          // Fetch updated user list
          fetchUsers();
        })
        .catch((error) => {
          console.error(error);
          // Handle error during update
        });
    } else {
      // Send POST request to register user
      axios
        .post("/api/register", user)
        .then((res) => {
          console.log(res.data);
          // Handle successful registration
          // Reset form fields
          setUsername("");
          setPassword("");
          setName("");
          setEmail("");
          setPhone("");
          setRole("teacher");

          // Fetch updated user list
          fetchUsers();
        })
        .catch((error) => {
          console.error(error);
          // Handle error during registration
        });
    }
  };
  const handleSearch = () => {
    const filtered = users.filter((user) => {
      const searchFilter =
        user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.phone.toLowerCase().includes(searchTerm.toLowerCase());

      const roleFilter = selectedRole === "all" || user.role === selectedRole;

      return searchFilter && roleFilter;
    });

    setFilteredUsers(filtered);
  };

  const deleteUser = (userId) => {
    // Send DELETE request to delete user
    axios
      .delete(`/api/users/${userId}`)
      .then((res) => {
        console.log(res.data);
        // Handle successful deletion
        // Fetch updated user list
        fetchUsers();
      })
      .catch((error) => {
        console.error(error);
        // Handle error during deletion
      });
  };

  const editUser = (user) => {
    if (selectedUser && selectedUser.id === user.id) {
      // Same user, reset form fields and editing state
      setUsername("");
      setPassword("");
      setName("");
      setEmail("");
      setPhone("");
      setRole("teacher");
      setIsEditing(false);
    } else {
      setSelectedUser(user);
      setUsername(user.username);
      setPassword(user.password);
      setName(user.name);
      setEmail(user.email);
      setPhone(user.phone);
      setRole(user.role);
      setIsEditing(true);
    }
  };

  return (
    <AdminLayout>
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-semibold mb-4">
          Subadmin User Registration
        </h1>

        {/* Registration Form */}
        <form onSubmit={handleSubmit} className="mb-8">
          <div className="mb-4">
            <label className="block text-gray-700">Username:</label>
            <input
              type="text"
              className="border border-gray-300 px-4 py-2 rounded w-full"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          {/* Add other form fields here */}
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-600 text-white font-semibold px-4 py-2 rounded"
          >
            {isEditing ? "Update" : "Register"}
          </button>
        </form>

        {/* User Table */}
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">User List</h2>

          {/* Search and Filter */}
          <div className="flex items-center">
            <input
              type="text"
              placeholder="Search"
              className="border border-gray-300 px-4 py-2 rounded-md mr-2 focus:outline-none"
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                handleSearch();
              }}
            />

            <select
              value={selectedRole}
              onChange={(e) => {
                setSelectedRole(e.target.value);
                handleSearch();
              }}
              className="border border-gray-300 px-4 py-2 rounded-md focus:outline-none"
            >
              <option value="all">All</option>
              <option value="teacher">Teacher</option>
              <option value="student">Student</option>
            </select>
          </div>
        </div>

        {/* User Table */}
        <table className="w-full border border-gray-300">
          <thead>
            <tr>
              <th className="border-b border-gray-300 px-4 py-2">Username</th>
              <th className="border-b border-gray-300 px-4 py-2">Name</th>
              <th className="border-b border-gray-300 px-4 py-2">Email</th>
              <th className="border-b border-gray-300 px-4 py-2">Phone</th>
              <th className="border-b border-gray-300 px-4 py-2">Role</th>
              <th className="border-b border-gray-300 px-4 py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map((user) => (
              <tr key={user.id}>
                <td className="border-b border-gray-300 px-4 py-2">
                  {user.username}
                </td>
                <td className="border-b border-gray-300 px-4 py-2">
                  {user.name}
                </td>
                <td className="border-b border-gray-300 px-4 py-2">
                  {user.email}
                </td>
                <td className="border-b border-gray-300 px-4 py-2">
                  {user.phone}
                </td>
                <td className="border-b border-gray-300 px-4 py-2">
                  {user.role}
                </td>
                <td className="border-b border-gray-300 px-4 py-2">
                  {/* Add update and delete buttons here */}
                  <button
                    onClick={() => editUser(user)}
                    className="text-blue-500 hover:text-blue-600 mx-2"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => deleteUser(user.id)}
                    className="text-red-500 hover:text-red-600 mx-2"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </AdminLayout>
  );
};

export default Index;
