import { useState } from "react";
import { Calendar } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import axios from "axios";
import AttendaceCards from "@/components/cards/Attendace/AttendaceCard";

export default function Attendance({ courseId, addedStudents }) {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [showCalendar, setShowCalendar] = useState(false);
  const [toggle, setToggle] = useState(true);
  const [students, setStudents] = useState(addedStudents);
  const toggleAll = () => {
    if (toggle) {
      const updatedStudents = students.map((student) => ({
        ...student,
        present: true,
        absentDates: [],
      }));
      setStudents(updatedStudents);
    } else {
      const updatedStudents = students.map((student) => ({
        ...student,
        present: false,
        absentDates: [
          ...student.absentDates,
          new Date().toLocaleDateString("en-US"),
        ],
      }));
      setStudents(updatedStudents);
    }
    setToggle(!toggle);
  };
  const handleAttendanceChange = (index, present) => {
    const updatedStudents = [...students];
    updatedStudents[index].present = present;
    if (!present) {
      if (!updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = [selectedDate.toDateString()];
      } else {
        updatedStudents[index].absentDates.push(selectedDate.toDateString());
      }
    } else {
      if (updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = updatedStudents[
          index
        ].absentDates.filter((date) => date !== selectedDate.toDateString());
      }
    }
    setStudents(updatedStudents);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setShowCalendar(false);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  const tileContent = ({ date, view }) => {
    if (!students) {
      return null;
    }
    const dateString = date.toDateString();
    const studentAbsentOnDate = students.filter((student) =>
      student.absentDates.includes(dateString)
    );
    const tooltip = studentAbsentOnDate
      .map((student) => student.name)
      .join(", ");
    return (
      <div>
        <p>{date.getDate()}</p>
        {studentAbsentOnDate.length > 0 && (
          <p classNameName="text-sm text-red-600">
            {studentAbsentOnDate.length} Absent
          </p>
        )}
        {studentAbsentOnDate.length > 0 && view === "month" && (
          <span classNameName="absolute top-0 right-0 m-1 w-3 h-3 bg-red-600 rounded-full"></span>
        )}
        {tooltip && <p classNameName="text-xs">{tooltip}</p>}
      </div>
    );
  };

  const saveAttendance = async () => {
    const studentAttendanceData = students.map((student) => ({
      studentId: student._id,
      courseId: courseId,
      attendance: {
        date: selectedDate,
        present: student.present,
        absent: !student.present,
      },
    }));

    
  };

  const markAllPresent = () => {
    const updatedStudents = students.map((student) => {
      return { ...student, present: true };
    });
    setStudents(updatedStudents);
  };
  const markAllAbsent = () => {
    const updatedStudents = students.map((student) => {
      const absentDates = Array.isArray(student.absentDates)
        ? [...student.absentDates, selectedDate.toDateString()]
        : [selectedDate.toDateString()];

      return {
        ...student,
        present: false,
        absentDates,
      };
    });
    setStudents(updatedStudents);
  };

  const averageAttendance = () => {
    const numStudents = students.length;
    const numPresentDays = students.reduce((totalDays, student) => {
      return totalDays + (student.present ? 1 : 0);
    }, 0);
    return ((numPresentDays / (numStudents * 4)) * 100).toFixed(2);
  };

  return (
    <div className="bg-white shadow-lg rounded-lg overflow-hidden">
      <ul
        role="list"
        className="grid px-4 sm:px-6 lg:px-8  grid-cols-1 gap-4 sm:gap-6 sm:grid-cols-2 xl:grid-cols-3 mt-3"
      >
        <AttendaceCards />
        <AttendaceCards />
        <AttendaceCards />
      </ul>

      {/* <div className="flex justify-between items-center px-4 py-2 bg-gray-100">
        <button
          className="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 text-white text-sm font-medium shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          onClick={toggleAll}
        >
          {toggle ? "Mark All Present" : "Mark All Absent"}
        </button>
        <div className="flex space-x-2">
          <p className="py-2 text-gray-600 text-sm font-medium">
            Average Attendance: {averageAttendance()}%
          </p>
        </div>
      </div> */}
      <div className="px-4 py-2">
        <button
          className="bg-blue-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-blue-700"
          onClick={toggleCalendar}
        >
          {selectedDate.toDateString()}
        </button>
      </div>
      {showCalendar && (
        <Calendar
          date={selectedDate}
          onChange={handleDateSelect}
          tileContent={tileContent}
          showDoubleView={true}
          className="p-4"
        />
      )}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr className="divide-gray-200">
              <th
                scope="col"
                className="py-3.5 px-4 text-left text-sm font-semibold text-gray-900"
              >
                Name
              </th>
              <th
                scope="col"
                className="py-3.5 px-4 text-left text-sm font-semibold text-gray-900"
              >
                Student ID
              </th>
              <th
                scope="col"
                className="py-3.5 px-4 text-left text-sm font-semibold text-gray-900"
              >
                Attendance
              </th>
            </tr>
          </thead>
          <tbody>
            {students.map((student, index) => (
              <tr key={index}>
                <td className="px-4 py-2 text-sm font-medium text-gray-900">
                  {student.name}
                </td>
                <td className="px-4 py-2 text-sm font-medium text-gray-900">
                  {student.rollNumber}
                </td>
                <td className="px-4 py-2">
                  <button
                    className={`${
                      student.present
                        ? "bg-green-500 hover:bg-green-600"
                        : "bg-red-500 hover:bg-red-600"
                    } inline-flex items-center px-4 py-2 text-white text-sm font-medium rounded-lg shadow-md`}
                    onClick={() =>
                      handleAttendanceChange(index, !student.present)
                    }
                  >
                    {student.present ? "Present" : "Absent"}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <button
        className="bg-red-600 text-white py-2 px-4 rounded-lg shadow-md hover:bg-red-700"
        onClick={saveAttendance}
      >
        Save Attendance
      </button>
    </div>
  );
}
//// new ne wenw 



import { useState } from "react";
import { Calendar } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import axios from "axios";

export default function Attendance({ courseId, addedStudents }) {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [showCalendar, setShowCalendar] = useState(false);
  const [toggle, setToggle] = useState(true);
  const [students, setStudents] = useState(addedStudents);
  const toggleAll = () => {
    if (toggle) {
      const updatedStudents = students.map((student) => ({
        ...student,
        present: true,
        absentDates: [],
      }));
      setStudents(updatedStudents);
    } else {
      const updatedStudents = students.map((student) => ({
        ...student,
        present: false,
        absentDates: [
          ...student.absentDates,
          new Date().toLocaleDateString("en-US"),
        ],
      }));
      setStudents(updatedStudents);
    }
    setToggle(!toggle);
  };
  const handleAttendanceChange = (index, present) => {
    const updatedStudents = [...students];
    updatedStudents[index].present = present;
    if (!present) {
      if (!updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = [selectedDate.toDateString()];
      } else {
        updatedStudents[index].absentDates.push(selectedDate.toDateString());
      }
    } else {
      if (updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = updatedStudents[
          index
        ].absentDates.filter((date) => date !== selectedDate.toDateString());
      }
    }
    setStudents(updatedStudents);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setShowCalendar(false);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  const tileContent = ({ date, view }) => {
    if (!students) {
      return null;
    }
    const dateString = date.toDateString();
    const studentAbsentOnDate = students.filter((student) =>
      student.absentDates.includes(dateString)
    );
    const tooltip = studentAbsentOnDate
      .map((student) => student.name)
      .join(", ");
    return (
      <div>
        <p>{date.getDate()}</p>
        {studentAbsentOnDate.length > 0 && (
          <p className="text-sm text-red-600">
            {studentAbsentOnDate.length} Absent
          </p>
        )}
        {studentAbsentOnDate.length > 0 && view === "month" && (
          <span className="absolute top-0 right-0 m-1 w-3 h-3 bg-red-600 rounded-full"></span>
        )}
        {tooltip && <p className="text-xs">{tooltip}</p>}
      </div>
    );
  };

  const saveAttendance = async () => {
    const studentAttendanceData = students.map((student) => ({
      studentId: student._id,
      courseId: courseId,
      attendance: {
        date: selectedDate,
        present: student.present,
        absent: !student.present,
      },
    }));
 
  };

  const markAllPresent = () => {
    const updatedStudents = students.map((student) => {
      return { ...student, present: true };
    });
    setStudents(updatedStudents);
  };
  const markAllAbsent = () => {
    const updatedStudents = students.map((student) => {
      const absentDates = Array.isArray(student.absentDates)
        ? [...student.absentDates, selectedDate.toDateString()]
        : [selectedDate.toDateString()];

      return {
        ...student,
        present: false,
        absentDates,
      };
    });
    setStudents(updatedStudents);
  };

  const averageAttendance = () => {
    const numStudents = students.length;
    const numPresentDays = students.reduce((totalDays, student) => {
      return totalDays + (student.present ? 1 : 0);
    }, 0);
    return ((numPresentDays / (numStudents * 4)) * 100).toFixed(2);
  };

  return (
    <div className="   py-10 bg-white px-4 sm:px-6 lg:px-8 ">
      <div className="flex justify-end mb-4">
        <button
          className="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
          onClick={toggleAll}
        >
          {toggle ? "Mark All Present" : "Mark All Absent"}
        </button>
      </div>
      <div className="flex justify-between items-center mb-5">
        <button
          className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
          onClick={toggleCalendar}
        >
          {selectedDate.toDateString()}
        </button>
        <div className="flex space-x-4">
          <button
            className="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700"
            onClick={saveAttendance}
          >
            Save Attendance
          </button>
          <p>Average Attendance: {averageAttendance()}%</p>
        </div>
      </div>
      {showCalendar && (
        <Calendar
          date={selectedDate}
          onChange={handleDateSelect}
          tileContent={tileContent}
          showDoubleView={true}
        />
      )}
      <table className="min-w-full divide-y divide-gray-300">
        <thead class="bg-gray-50">
          <tr class="  divide-gray-200">
            <th
              scope="col"
              class="py-3.5 pl-4 pr-4 text-left text-sm font-semibold text-gray-900 sm:pl-6"
            >
              Name
            </th>
            <th
              scope="col"
              class="px-4 py-3.5 text-left text-sm font-semibold text-gray-900"
            >
              Student Id
            </th>

            <th
              scope="col"
              class="py-3.5 pl-4 pr-4 text-left text-sm font-semibold text-gray-900 sm:pr-6"
            >
              Attendance
            </th>
          </tr>
        </thead>
        <tbody>
          {students.map((student, index) => (
            <tr key={index}>
              <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 lg:pl-8">
                {student.name}
              </td>
              <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 lg:pl-8">
                {student.rollNumber}
              </td>

              <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 lg:pl-8">
                <button
                  className={`${
                    student.present ? "bg-green-500" : "bg-red-500"
                  } inline-flex items-center px-4 py-2 text-white text-sm font-medium rounded-md`}
                  onClick={() =>
                    handleAttendanceChange(index, !student.present)
                  }
                >
                  {student.present ? "Present" : "Absent"}
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
