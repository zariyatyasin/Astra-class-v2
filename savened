import * as React from "react";
import PropTypes from "prop-types";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import Class from "../../../model/Class";
import ClassRoomHeader from "@/components/Teacher/classRooms/ClassRoomHeader";
import Box from "@mui/material/Box";
import TeacherLayout from "@/components/layout/TeacherLayout";
import { connectDb, disconnectDb } from "@/utils/db";
import { ObjectId } from "mongodb";
import ClassStudentTable from "@/components/SubAdmin/createClass/ClassStudentTable";
import User from "@/model/User";
import Table from "@/components/Teacher/classRooms/TableStudent";
import { useState } from "react";
import { useRouter } from "next/router";
import axios from "axios";
import Attendance from "@/components/Teacher/attendance/Attendance";
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box>
          <div>{children}</div>
        </Box>
      )}
    </div>
  );
}

TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
};

function a11yProps(index) {
  return {
    id: `simple-tab-${index}`,
    "aria-controls": `simple-tabpanel-${index}`,
  };
}

//main index
const index = ({ classObj, courseStudents, addStudentInClass }) => {
  const [value, setValue] = useState(0);
  const router = useRouter();
  const { id } = router.query;
  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const [students, setStudents] = useState(courseStudents);
  const [loading, setLoading] = useState(false);
  const [addedStudents, setAddedStudents] = useState(addStudentInClass);
  const handleAddStudent = async (studentToAdd) => {
    setAddedStudents((prevAddedStudents) => [
      ...prevAddedStudents,
      studentToAdd,
    ]);
    setLoading(true); // set loading to true here

    try {
      const res = await axios.put(`/api/subadmin/createclass/${id}`, {
        id: studentToAdd._id,
        studentName: studentToAdd.name,
        studentRoll: studentToAdd.rollNumber,
      });
      setLoading(false); // set loading to false here
    } catch (error) {
      setLoading(false); // set loading to false here as well
      console.error(error);
    }
  };

  const handleRemoveStudent = async (studentToRemove) => {
    setAddedStudents((prevAddedStudents) =>
      prevAddedStudents.filter((student) => student._id !== studentToRemove._id)
    );
    setLoading(true); // set loading to true here

    try {
      const res = await axios.put(`/api/subadmin/createclass/${id}`, {
        id: studentToRemove._id,
        studentName: studentToRemove.name,
        studentRoll: studentToRemove.rollNumber,
      });
      setLoading(false); // set loading to false here
    } catch (error) {
      setLoading(false); // set loading to false here as well
      console.error(error);
    }
  };

  const notAddedStudents = students.filter((student) => {
    return !addedStudents.find(
      (addedStudent) => addedStudent._id === student._id
    );
  });

  const [modelOpen, setModelOpen] = useState(false);
  return (
    <TeacherLayout>
      {loading && <div>Loading...</div>}
      <ClassRoomHeader
        setModelOpen={setModelOpen}
        modelOpen={modelOpen}
        classObj={classObj}
        students={students}
        onRemoveStudent={handleRemoveStudent}
        addedStudents={addedStudents}
        notAddedStudents={notAddedStudents}
        onAddStudent={handleAddStudent}
      />
      <div className="px-4 sm:px-6 lg:px-8 bg-white h-screen ">
        <Box sx={{ width: "100%" }}>
          <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
            <Tabs
              value={value}
              onChange={handleChange}
              aria-label="basic tabs example"
            >
              <Tab label="Students" {...a11yProps(0)} />
              <Tab label="Attendance" {...a11yProps(1)} />
              <Tab label="Exam" {...a11yProps(2)} />
              <Tab label="Post" {...a11yProps(3)} />
            </Tabs>
          </Box>
          <TabPanel value={value} index={0}>
            {/* <ClassStudentTable
              studentList={classObj.students}
              itemsPerPage={10}
            /> */}
            <Table
              students={addedStudents}
              onRemoveStudent={handleRemoveStudent}
            />{" "}
          </TabPanel>
          <TabPanel value={value} index={1}>
            <Attendance />
          </TabPanel>
          <TabPanel value={value} index={2}>
            Exam
          </TabPanel>
          <TabPanel value={value} index={3}>
            Post
          </TabPanel>
        </Box>
      </div>
    </TeacherLayout>
  );
};

export default index;
export async function getServerSideProps(context) {
  try {
    await connectDb();

    const classId = context.query.id;
    const classObjId = new ObjectId(classId);

    const classObj = await Class.findOne({
      _id: classObjId,
    }).lean();

    const courseStudents = await User.find({
      courses: {
        $elemMatch: {
          courseeId: classObj.course,
        },
      },
    }).lean();

    const addStudentInClass = await User.find({
      class: classObjId,
    }).lean();
    await disconnectDb();

    return {
      props: {
        classObj: JSON.parse(JSON.stringify(classObj)),
        courseStudents: JSON.parse(JSON.stringify(courseStudents)),
        addStudentInClass: JSON.parse(JSON.stringify(addStudentInClass)),
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: {
        classObj: null,
      },
    };
  }
}
//////// Need attendance





import { useState } from "react";
import { Calendar } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";

function Attendance() {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [showCalendar, setShowCalendar] = useState(false);
  const [students, setStudents] = useState([
    { roll: 1, name: "John Doe", present: false, absentDates: [] },
    { roll: 2, name: "Jane Smith", present: true, absentDates: [] },
    { roll: 3, name: "Bob Johnson", present: false, absentDates: [] },
    // add more students here
  ]);

  console.log(students);
  const handleAttendanceChange = (index) => {
    const updatedStudents = [...students];
    updatedStudents[index].present = !updatedStudents[index].present;
    if (!updatedStudents[index].present) {
      updatedStudents[index].absentDates.push(selectedDate.toDateString());
    } else {
      updatedStudents[index].absentDates = updatedStudents[
        index
      ].absentDates.filter((date) => date !== selectedDate.toDateString());
    }
    setStudents(updatedStudents);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  const tileContent = ({ date, view }) => {
    if (view === "month") {
      const absences = students.reduce(
        (acc, student) =>
          student.absentDates.includes(date.toDateString()) ? acc + 1 : acc,
        0
      );
      return <p className="text-sm font-bold">{absences}</p>;
    }
    return null;
  };

  const markAllPresent = () => {
    const updatedStudents = students.map((student) => {
      return { ...student, present: true };
    });
    setStudents(updatedStudents);
  };

  const markAllAbsent = () => {
    const updatedStudents = students.map((student) => {
      return {
        ...student,
        present: false,
        absentDates: [...student.absentDates, selectedDate.toDateString()],
      };
    });
    setStudents(updatedStudents);
  };

  return (
    <div className="flex flex-col md:flex-row space-x-4">
      <div className="w-full md:w-1/4 relative">
        <button
          onClick={toggleCalendar}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
        >
          {showCalendar ? "Hide Calendar" : "Show Calendar"}
        </button>
        {showCalendar && (
          <div className="absolute top-full z-10">
            <Calendar
              date={selectedDate}
              onChange={(date) => setSelectedDate(date)}
              tileContent={tileContent}
            />
          </div>
        )}
      </div>
      <div className="w-full md:w-3/4">
        <div className="flex justify-end mb-4">
          <button
            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded mr-4"
            onClick={markAllPresent}
          >
            Mark All Present
          </button>
          <button
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
            onClick={markAllAbsent}
          >
            Mark All Absent
          </button>
        </div>
        <table className="w-full border-collapse">
          <thead>
            <tr>
              <th className="border p-2">#</th>
              <th className="border p-2">Name</th>
              <th className="border p-2">Attendance</th>
            </tr>
          </thead>
          <tbody>
            {students.map((student, index) => (
              <tr key={index}>
                <td className="p-2 border">{student.roll}</td>
                <td className="p-2 border">{student.name}</td>
                <td className="p-2 border">
                  <button
                    className={`${
                      student.present ? "bg-green-500" : "bg-red-500"
                    } inline-flex items-center px-4 py-2   text-white text-sm font-medium rounded-md`}
                    onClick={() => handleAttendanceChange(index)}
                  >
                    {student.present ? "Present" : "Absent"}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default Attendance;



/// addten finala


import { useState } from "react";
import { Calendar } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import axios from "axios";

export default function Attendance({ courseId, addedStudents }) {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [showCalendar, setShowCalendar] = useState(false);

  const filteredCourses = addedStudents.map((student) => {
    const enrolledCourses = student.courses?.filter(
      (course) => course.courseId === courseId
    );
    return enrolledCourses;
  });

  console.log("this is", filteredCourses);
  const [students, setStudents] = useState(addedStudents);

  const handleAttendanceChange = (index, present) => {
    const updatedStudents = [...students];
    updatedStudents[index].present = present;
    if (!present) {
      if (!updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = [selectedDate.toDateString()];
      } else {
        updatedStudents[index].absentDates.push(selectedDate.toDateString());
      }
    } else {
      if (updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = updatedStudents[
          index
        ].absentDates.filter((date) => date !== selectedDate.toDateString());
      }
    }
    setStudents(updatedStudents);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setShowCalendar(false);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  const tileContent = ({ date, view }) => {
    if (!students) {
      return null;
    }
    const dateString = date.toDateString();
    const studentAbsentOnDate = students.filter((student) =>
      student.absentDates.includes(dateString)
    );
    const tooltip = studentAbsentOnDate
      .map((student) => student.name)
      .join(", ");
    return (
      <div>
        <p>{date.getDate()}</p>
        {studentAbsentOnDate.length > 0 && (
          <p className="text-sm text-red-600">
            {studentAbsentOnDate.length} Absent
          </p>
        )}
        {studentAbsentOnDate.length > 0 && view === "month" && (
          <span className="absolute top-0 right-0 m-1 w-3 h-3 bg-red-600 rounded-full"></span>
        )}
        {tooltip && <p className="text-xs">{tooltip}</p>}
      </div>
    );
  };

  const saveAttendance = async () => {
    console.log(students);
  };
  const averageAttendance = () => {
    const numStudents = students.length;
    const numPresentDays = students.reduce((totalDays, student) => {
      return totalDays + (student.present ? 1 : 0);
    }, 0);
    return ((numPresentDays / (numStudents * 4)) * 100).toFixed(2);
  };

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-5">
        <button
          className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
          onClick={toggleCalendar}
        >
          {selectedDate.toDateString()}
        </button>
        <div className="flex space-x-4">
          <button
            className="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700"
            onClick={saveAttendance}
          >
            Save Attendance
          </button>
          <p>Average Attendance: {averageAttendance()}%</p>
        </div>
      </div>
      {showCalendar && (
        <Calendar
          date={selectedDate}
          onChange={handleDateSelect}
          tileContent={tileContent}
          showDoubleView={true}
        />
      )}
      <table className="table-auto w-full">
        <thead>
          <tr>
            <th className="px-4 py-2"></th>
            <th className="px-4 py-2">Name</th>
            <th className="px-4 py-2">Email</th>
            <th className="px-4 py-2">Attendance</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student, index) => (
            <tr key={index}>
              <td className="p-2 border">{student.roll}</td>
              <td className="p-2 border">{student.name}</td>
              <td className="p-2 border">
                <button
                  className={`${
                    student.present ? "bg-green-500" : "bg-red-500"
                  } inline-flex items-center px-4 py-2 text-white text-sm font-medium rounded-md`}
                  onClick={() =>
                    handleAttendanceChange(index, !student.present)
                  }
                >
                  {student.present ? "Present" : "Absent"}
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}




const handleAttendanceChange = async (e, studentId, index) => {
  const present = e.target.value === "present";

  // Find the student by their _id
  const foundStudent = addedStudents.find(
    (student) => student._id === studentId
  );

  // Find the relevant course by courseId
  const foundCourse = foundStudent.course.find(
    (course) => course.courseeId === courseId
  );

  // Add the attendance information for the selected date
  const newAttendance = {
    date: selectedDate,
    present,
    absent: !present,
  };
  foundCourse.attendance.push(newAttendance);

  console.log(foundCourse);

  // Update the student's information in the database
  // a




///now


  import { useState } from "react";
import { Calendar } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";
import axios from "axios";

export default function Attendance({ courseId, addedStudents }) {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [showCalendar, setShowCalendar] = useState(false);

  const [students, setStudents] = useState(addedStudents);

  const handleAttendanceChange = (index, present) => {
    const updatedStudents = [...students];
    updatedStudents[index].present = present;
    if (!present) {
      if (!updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = [selectedDate.toDateString()];
      } else {
        updatedStudents[index].absentDates.push(selectedDate.toDateString());
      }
    } else {
      if (updatedStudents[index].absentDates) {
        updatedStudents[index].absentDates = updatedStudents[
          index
        ].absentDates.filter((date) => date !== selectedDate.toDateString());
      }
    }
    setStudents(updatedStudents);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
    setShowCalendar(false);
  };

  const toggleCalendar = () => {
    setShowCalendar(!showCalendar);
  };

  const tileContent = ({ date, view }) => {
    if (!students) {
      return null;
    }
    const dateString = date.toDateString();
    const studentAbsentOnDate = students.filter((student) =>
      student.absentDates.includes(dateString)
    );
    const tooltip = studentAbsentOnDate
      .map((student) => student.name)
      .join(", ");
    return (
      <div>
        <p>{date.getDate()}</p>
        {studentAbsentOnDate.length > 0 && (
          <p className="text-sm text-red-600">
            {studentAbsentOnDate.length} Absent
          </p>
        )}
        {studentAbsentOnDate.length > 0 && view === "month" && (
          <span className="absolute top-0 right-0 m-1 w-3 h-3 bg-red-600 rounded-full"></span>
        )}
        {tooltip && <p className="text-xs">{tooltip}</p>}
      </div>
    );
  };

  const saveAttendance = async () => {
    const studentAttendanceData = students.map((student) => ({
      studentId: student._id,
      courseId: courseId,
      attendance: {
        date: selectedDate,
        present: student.present,
        absent: !student.present,
      },
    }));

    console.log("new stu", studentAttendanceData);
  };

  const averageAttendance = () => {
    const numStudents = students.length;
    const numPresentDays = students.reduce((totalDays, student) => {
      return totalDays + (student.present ? 1 : 0);
    }, 0);
    return ((numPresentDays / (numStudents * 4)) * 100).toFixed(2);
  };

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-5">
        <button
          className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
          onClick={toggleCalendar}
        >
          {selectedDate.toDateString()}
        </button>
        <div className="flex space-x-4">
          <button
            className="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700"
            onClick={saveAttendance}
          >
            Save Attendance
          </button>
          <p>Average Attendance: {averageAttendance()}%</p>
        </div>
      </div>
      {showCalendar && (
        <Calendar
          date={selectedDate}
          onChange={handleDateSelect}
          tileContent={tileContent}
          showDoubleView={true}
        />
      )}
      <table className="table-auto w-full">
        <thead>
          <tr>
            <th className="px-4 py-2"></th>
            <th className="px-4 py-2">Name</th>
            <th className="px-4 py-2">Email</th>
            <th className="px-4 py-2">Attendance</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student, index) => (
            <tr key={index}>
              <td className="p-2 border">{student.roll}</td>
              <td className="p-2 border">{student.name}</td>
              <td className="p-2 border">
                <button
                  className={`${
                    student.present ? "bg-green-500" : "bg-red-500"
                  } inline-flex items-center px-4 py-2 text-white text-sm font-medium rounded-md`}
                  onClick={() =>
                    handleAttendanceChange(index, !student.present)
                  }
                >
                  {student.present ? "Present" : "Absent"}
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}












///table



<div className="px-4 sm:px-6 lg:px-8">
<div className="sm:flex sm:items-center">
  <div className="sm:flex-auto">
    <h1 className="text-xl font-semibold text-gray-900">Users</h1>
    <p className="mt-2 text-sm text-gray-700">
      A list of all the users in your account including their name, title,
      email and role.
    </p>
  </div>
  <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
    <button
      type="button"
      className="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
    >
      Add user
    </button>
  </div>
</div>
<div className="mt-8 flex flex-col">
  <div className="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
    <div className="inline-block min-w-full py-2 align-middle">
      <div className="overflow-hidden shadow-sm ring-1 ring-black ring-opacity-5">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th
                scope="col"
                className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6 lg:pl-8"
              >
                Name
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                Student Id
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                Email
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                Active
              </th>
              <th
                scope="col"
                className="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8"
              >
                <span className="sr-only">Edit</span>
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 bg-white">
            {currentItems.map((student) => (
              <tr>
                <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 lg:pl-8">
                  Lindsay Walton
                </td>
                <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                  Front-end Developer
                </td>
                <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                  lindsay.walton@example.com
                </td>
                <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                  Member
                </td>
                <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 lg:pr-8">
                  <a
                    href="#"
                    className="text-indigo-600 hover:text-indigo-900"
                  >
                    Edit<span class="sr-only">, Lindsay Walton</span>
                  </a>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
</div>





   <div className="flex flex-col">
      <div className="flex items-center ">
        <input
          type="text"
          className="rounded-l-lg p-4 border-t mr-0 border-b border-l text-gray-800 border-gray-200 bg-white"
          placeholder="Search students..."
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button className="px-8 rounded-r-lg bg-green-500 text-white font-bold p-4 uppercase border-green-600 border-t border-b border-r">
          Search
        </button>
      </div>

      <div className="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
        <div className="inline-block min-w-full shadow-md rounded-lg overflow-hidden">
          <table className="min-w-full leading-normal">
            <thead>
              <tr>
                <th className="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                  Student Name
                </th>
                <th className="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                  Student Id
                </th>
                <th className="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                  Action
                </th>
              </tr>
            </thead>
            <tbody>
              {currentItems.map((student) => (
                <tr key={student._id}>
                  <td className="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                    <div className="flex items-center">
                      <div className="ml-3">
                        <p className="text-gray-900 whitespace-no-wrap">
                          {student.name}
                        </p>
                        <p className="text-gray-600 whitespace-no-wrap">
                          Roll Number: {student.rollNumber}
                        </p>
                      </div>
                    </div>
                  </td>
                  <td className="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                    {tempAddedStudents.includes(student) ? (
                      <button
                        className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full"
                        onClick={() => {
                          setTempAddedStudents(
                            tempAddedStudents.filter((s) => s !== student)
                          );
                        }}
                      >
                        Remove
                      </button>
                    ) : !notAddedStudents?.includes(student) ? (
                      <button
                        className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full"
                        onClick={() => handleRemoveStudent(student)}
                      >
                        Remove
                      </button>
                    ) : (
                      <button
                        className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full"
                        onClick={() => handleAddStudent(student)}
                      >
                        Add
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          {filteredStudents.length === 0 && (
            <div className="px-6 py-4 whitespace-no-wrap">
              No students found.
            </div>
          )}
          {filteredStudents.length > 0 && (
            <div className="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between          ">
              <div className="inline-flex mt-2 xs:mt-0">
                <button
                  disabled={currentPage === 1}
                  className="text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-l"
                  onClick={() => setCurrentPage(currentPage - 1)}
                >
                  Previous
                </button>
                {Array.from({ length: totalPages }, (_, i) => (
                  <button
                    key={i}
                    className={`mx-1 font-semibold py-2 px-4 ${
                      currentPage === i + 1
                        ? "bg-blue-500 text-white"
                        : "bg-gray-300 text-gray-700 hover:bg-gray-400"
                    } rounded`}
                    onClick={() => setCurrentPage(i + 1)}
                  >
                    {i + 1}
                  </button>
                ))}
                <button
                  disabled={currentPage === totalPages}
                  className="text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-r"
                  onClick={() => setCurrentPage(currentPage + 1)}
                >
                  Next
                </button>
              </div>
              {notAddedStudents?.length > 0 && (
                <div className="inline-flex mt-2 xs:mt-0">
                  <button
                    className="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm"
                    onClick={handleSave}
                  >
                    {loading ? "Loading..." : "Save"}
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>